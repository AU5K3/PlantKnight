{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bayer\\\\OneDrive\\\\Documents\\\\GitHub\\\\PlantKnight\\\\actual_plant_website\\\\src\\\\components\\\\Plants.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport gardenBg from \"../sprites/garden_background.png\";\nimport \"../App.css\"; // Ensure this file is used for the CSS below\n\n// NOTE: I'm assuming your plant objects have 'id', 'name', 'species', and 'status' properties.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Plants() {\n  _s();\n  const [plants, setPlants] = useState([]);\n  const [refreshKey, setRefreshKey] = useState(0);\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  // Example: Fetch plants from cloud database (replace with your API)\n  useEffect(() => {\n    async function fetchPlants() {\n      try {\n        // First try to get plants from localStorage (from login)\n        /*\r\n        const userDataStr = localStorage.getItem('userData');\r\n        if (userDataStr) {\r\n          const userData = JSON.parse(userDataStr);\r\n          console.log(\"User data from localStorage:\", userData);\r\n          \r\n          if (userData.devices && Array.isArray(userData.devices)) {\r\n            // Transform user's devices to plant format\r\n            const transformedPlants = userData.devices.map((device, index) => ({\r\n              id: device.device_id || `plant_${index}`,\r\n              name: device.plant_name || 'Unknown Plant',\r\n              species: device.species || 'Unknown Species',\r\n              status: device.is_connected ? 'Connected' : 'Disconnected'\r\n            }));\r\n            setPlants(transformedPlants);\r\n            return;\r\n          }\r\n        }\r\n          */\n\n        // Fallback: Get username from localStorage and fetch from API\n        const username = localStorage.getItem('username') || \"testuser\";\n        console.log(\"Fetching plants for user from API:\", username);\n        const res = await fetch(`http://127.0.0.1:5000/api/get_user_plants?username=${username}`);\n\n        // Handle 404 (user not found) as a special case\n        if (res.status === 404) {\n          console.warn(\"User not found, using mock data\");\n          setPlants(getMockData());\n          return;\n        }\n        if (!res.ok) {\n          throw new Error(`HTTP error! status: ${res.status}`);\n        }\n        const data = await res.json();\n        console.log(\"Fetched plants data from API:\", data);\n\n        // Check if the response has the expected structure\n        if (data && data.plants && Array.isArray(data.plants)) {\n          // Transform API data to match component expectations\n          const transformedPlants = data.plants.map((plant, index) => ({\n            id: plant.device_id || `plant_${index}`,\n            name: plant.plant_name || 'Unknown Plant',\n            species: plant.species || 'Unknown Species',\n            status: plant.is_connected ? 'Connected' : 'Disconnected'\n          }));\n          setPlants(transformedPlants);\n        } else {\n          console.warn(\"Unexpected API response structure:\", data);\n          // Fallback to mock data if API structure is unexpected\n          setPlants(getMockData());\n        }\n      } catch (err) {\n        console.error(\"Error fetching plants, using mock data:\", err);\n        // Fallback to mock data if the API call fails\n        setPlants(getMockData());\n      }\n    }\n\n    // Helper function for mock data\n    function getMockData() {\n      return [{\n        id: 1,\n        name: \"Basil\",\n        species: \"Ocimum basilicum\",\n        status: \"Happy\"\n      }, {\n        id: 2,\n        name: \"Succulent\",\n        species: \"Echeveria pulidonis\",\n        status: \"Dry\"\n      }, {\n        id: 3,\n        name: \"Fern\",\n        species: \"Nephrolepis exaltata\",\n        status: \"Needs Water\"\n      }, {\n        id: 4,\n        name: \"Rose\",\n        species: \"Rosa 'Peace'\",\n        status: \"Healthy\"\n      }, {\n        id: 5,\n        name: \"Mint\",\n        species: \"Mentha spicata\",\n        status: \"Thriving\"\n      }, {\n        id: 6,\n        name: \"Orchid\",\n        species: \"Phalaenopsis\",\n        status: \"Blooming\"\n      }];\n    }\n    fetchPlants();\n  }, [refreshKey]);\n\n  // Refresh plants when returning from remove plant page\n  useEffect(() => {\n    if (location.pathname === '/plants') {\n      refreshPlants();\n    }\n  }, [location.pathname]);\n  const handleAddPlant = () => {\n    navigate(\"/addplant\");\n  };\n  const handleRemovePlant = () => {\n    navigate(\"/removeplant\");\n  };\n  const refreshPlants = () => {\n    setRefreshKey(prev => prev + 1);\n  };\n  const openPlantDashboard = plantId => {\n    navigate(`/plants/${plantId}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"plants-page\",\n    style: {\n      backgroundImage: `url(${gardenBg})`,\n      backgroundSize: \"cover\",\n      backgroundPosition: \"center\",\n      backgroundRepeat: \"no-repeat\",\n      minHeight: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"plants-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Garden Guardian\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleAddPlant,\n        className: \"add-plant-button\",\n        children: \"Add Plant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRemovePlant,\n        className: \"remove-plant-button\",\n        children: \"Remove Plant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"nav\", {\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        children: \"Logout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"plant-list-container\",\n      children: plants.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No plants yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"plant-list\",\n        children: plants.map(plant => {\n          // Ensure plant object has required properties with fallbacks\n          const plantId = (plant === null || plant === void 0 ? void 0 : plant.id) || 'unknown';\n          const plantName = (plant === null || plant === void 0 ? void 0 : plant.name) || 'Unknown Plant';\n          const plantSpecies = (plant === null || plant === void 0 ? void 0 : plant.species) || 'Unknown Species';\n          const plantStatus = (plant === null || plant === void 0 ? void 0 : plant.status) || 'Unknown';\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"plant-item\",\n            onClick: () => openPlantDashboard(plantId),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"plant-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                className: \"plant-name\",\n                children: plantName\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"plant-species\",\n                children: [\"Species: \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: plantSpecies\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 32\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"plant-status\",\n                children: [\"Status:\", \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `status-${plantStatus.toLowerCase().replace(/\\s/g, \"-\")}`,\n                  children: plantStatus\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 19\n            }, this)\n          }, plantId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_s(Plants, \"v54FOxjTfFdAR3o3YbdEGQEAdo4=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = Plants;\nvar _c;\n$RefreshReg$(_c, \"Plants\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","useLocation","Link","gardenBg","jsxDEV","_jsxDEV","Plants","_s","plants","setPlants","refreshKey","setRefreshKey","navigate","location","fetchPlants","username","localStorage","getItem","console","log","res","fetch","status","warn","getMockData","ok","Error","data","json","Array","isArray","transformedPlants","map","plant","index","id","device_id","name","plant_name","species","is_connected","err","error","pathname","refreshPlants","handleAddPlant","handleRemovePlant","prev","openPlantDashboard","plantId","className","style","backgroundImage","backgroundSize","backgroundPosition","backgroundRepeat","minHeight","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","to","length","plantName","plantSpecies","plantStatus","toLowerCase","replace","_c","$RefreshReg$"],"sources":["C:/Users/bayer/OneDrive/Documents/GitHub/PlantKnight/actual_plant_website/src/components/Plants.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { useNavigate, useLocation } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport gardenBg from \"../sprites/garden_background.png\";\r\nimport \"../App.css\"; // Ensure this file is used for the CSS below\r\n\r\n// NOTE: I'm assuming your plant objects have 'id', 'name', 'species', and 'status' properties.\r\n\r\nexport default function Plants() {\r\n  const [plants, setPlants] = useState([]);\r\n  const [refreshKey, setRefreshKey] = useState(0);\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n\r\n  // Example: Fetch plants from cloud database (replace with your API)\r\n  useEffect(() => {\r\n    async function fetchPlants() {\r\n      try {\r\n        // First try to get plants from localStorage (from login)\r\n        /*\r\n        const userDataStr = localStorage.getItem('userData');\r\n        if (userDataStr) {\r\n          const userData = JSON.parse(userDataStr);\r\n          console.log(\"User data from localStorage:\", userData);\r\n          \r\n          if (userData.devices && Array.isArray(userData.devices)) {\r\n            // Transform user's devices to plant format\r\n            const transformedPlants = userData.devices.map((device, index) => ({\r\n              id: device.device_id || `plant_${index}`,\r\n              name: device.plant_name || 'Unknown Plant',\r\n              species: device.species || 'Unknown Species',\r\n              status: device.is_connected ? 'Connected' : 'Disconnected'\r\n            }));\r\n            setPlants(transformedPlants);\r\n            return;\r\n          }\r\n        }\r\n          */\r\n        \r\n        // Fallback: Get username from localStorage and fetch from API\r\n        const username = localStorage.getItem('username') || \"testuser\";\r\n        console.log(\"Fetching plants for user from API:\", username);\r\n        \r\n        const res = await fetch(`http://127.0.0.1:5000/api/get_user_plants?username=${username}`);\r\n        \r\n        // Handle 404 (user not found) as a special case\r\n        if (res.status === 404) {\r\n          console.warn(\"User not found, using mock data\");\r\n          setPlants(getMockData());\r\n          return;\r\n        }\r\n        \r\n        if (!res.ok) {\r\n          throw new Error(`HTTP error! status: ${res.status}`);\r\n        }\r\n        \r\n        const data = await res.json();\r\n        console.log(\"Fetched plants data from API:\", data);\r\n        \r\n        // Check if the response has the expected structure\r\n        if (data && data.plants && Array.isArray(data.plants)) {\r\n          // Transform API data to match component expectations\r\n          const transformedPlants = data.plants.map((plant, index) => ({\r\n            id: plant.device_id || `plant_${index}`,\r\n            name: plant.plant_name || 'Unknown Plant',\r\n            species: plant.species || 'Unknown Species',\r\n            status: plant.is_connected ? 'Connected' : 'Disconnected'\r\n          }));\r\n          setPlants(transformedPlants);\r\n        } else {\r\n          console.warn(\"Unexpected API response structure:\", data);\r\n          // Fallback to mock data if API structure is unexpected\r\n          setPlants(getMockData());\r\n        }\r\n      } catch (err) {\r\n        console.error(\"Error fetching plants, using mock data:\", err);\r\n        // Fallback to mock data if the API call fails\r\n        setPlants(getMockData());\r\n      }\r\n    }\r\n    \r\n    // Helper function for mock data\r\n    function getMockData() {\r\n      return [\r\n        { id: 1, name: \"Basil\", species: \"Ocimum basilicum\", status: \"Happy\" },\r\n        { id: 2, name: \"Succulent\", species: \"Echeveria pulidonis\", status: \"Dry\" },\r\n        { id: 3, name: \"Fern\", species: \"Nephrolepis exaltata\", status: \"Needs Water\" },\r\n        { id: 4, name: \"Rose\", species: \"Rosa 'Peace'\", status: \"Healthy\" },\r\n        { id: 5, name: \"Mint\", species: \"Mentha spicata\", status: \"Thriving\" },\r\n        { id: 6, name: \"Orchid\", species: \"Phalaenopsis\", status: \"Blooming\" },\r\n      ];\r\n    }\r\n    \r\n    fetchPlants();\r\n  }, [refreshKey]);\r\n\r\n  // Refresh plants when returning from remove plant page\r\n  useEffect(() => {\r\n    if (location.pathname === '/plants') {\r\n      refreshPlants();\r\n    }\r\n  }, [location.pathname]);\r\n\r\n  const handleAddPlant = () => {\r\n    navigate(\"/addplant\");\r\n  };\r\n\r\n  const handleRemovePlant = () => {\r\n    navigate(\"/removeplant\");\r\n  };\r\n\r\n  const refreshPlants = () => {\r\n    setRefreshKey(prev => prev + 1);\r\n  };\r\n\r\n  const openPlantDashboard = (plantId) => {\r\n    navigate(`/plants/${plantId}`);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"plants-page\"\r\n      style={{\r\n        backgroundImage: `url(${gardenBg})`,\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        backgroundRepeat: \"no-repeat\",\r\n        minHeight: \"100vh\",\r\n      }}\r\n    >\r\n      <div className=\"plants-header\">\r\n        <h1>Garden Guardian</h1>\r\n      </div>\r\n  \r\n      <div className=\"button-group\">\r\n        <button onClick={handleAddPlant} className=\"add-plant-button\">\r\n          Add Plant\r\n        </button>\r\n        <button onClick={handleRemovePlant} className=\"remove-plant-button\">\r\n          Remove Plant\r\n        </button>\r\n      </div>\r\n  \r\n      <nav>\r\n        <Link to=\"/\">Logout</Link>\r\n      </nav>\r\n  \r\n      <div className=\"plant-list-container\">\r\n        {plants.length === 0 ? (\r\n          <p>No plants yet</p>\r\n        ) : (\r\n          <ul className=\"plant-list\">\r\n            {plants.map((plant) => {\r\n              // Ensure plant object has required properties with fallbacks\r\n              const plantId = plant?.id || 'unknown';\r\n              const plantName = plant?.name || 'Unknown Plant';\r\n              const plantSpecies = plant?.species || 'Unknown Species';\r\n              const plantStatus = plant?.status || 'Unknown';\r\n              \r\n              return (\r\n                <li\r\n                  key={plantId}\r\n                  className=\"plant-item\"\r\n                  onClick={() => openPlantDashboard(plantId)}\r\n                >\r\n                  <div className=\"plant-info\">\r\n                    <h3 className=\"plant-name\">{plantName}</h3>\r\n                    <p className=\"plant-species\">\r\n                      Species: <span>{plantSpecies}</span>\r\n                    </p>\r\n                    <p className=\"plant-status\">\r\n                      Status:{\" \"}\r\n                      <span\r\n                        className={`status-${plantStatus\r\n                          .toLowerCase()\r\n                          .replace(/\\s/g, \"-\")}`}\r\n                      >\r\n                        {plantStatus}\r\n                      </span>\r\n                    </p>\r\n                  </div>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );}\r\n "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAOC,QAAQ,MAAM,kCAAkC;AACvD,OAAO,YAAY,CAAC,CAAC;;AAErB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,eAAe,SAASC,MAAMA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACW,UAAU,EAAEC,aAAa,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EAC/C,MAAMa,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAC9B,MAAMa,QAAQ,GAAGZ,WAAW,CAAC,CAAC;;EAE9B;EACAH,SAAS,CAAC,MAAM;IACd,eAAegB,WAAWA,CAAA,EAAG;MAC3B,IAAI;QACF;QACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;QAEQ;QACA,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,UAAU;QAC/DC,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEJ,QAAQ,CAAC;QAE3D,MAAMK,GAAG,GAAG,MAAMC,KAAK,CAAC,sDAAsDN,QAAQ,EAAE,CAAC;;QAEzF;QACA,IAAIK,GAAG,CAACE,MAAM,KAAK,GAAG,EAAE;UACtBJ,OAAO,CAACK,IAAI,CAAC,iCAAiC,CAAC;UAC/Cd,SAAS,CAACe,WAAW,CAAC,CAAC,CAAC;UACxB;QACF;QAEA,IAAI,CAACJ,GAAG,CAACK,EAAE,EAAE;UACX,MAAM,IAAIC,KAAK,CAAC,uBAAuBN,GAAG,CAACE,MAAM,EAAE,CAAC;QACtD;QAEA,MAAMK,IAAI,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;QAC7BV,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEQ,IAAI,CAAC;;QAElD;QACA,IAAIA,IAAI,IAAIA,IAAI,CAACnB,MAAM,IAAIqB,KAAK,CAACC,OAAO,CAACH,IAAI,CAACnB,MAAM,CAAC,EAAE;UACrD;UACA,MAAMuB,iBAAiB,GAAGJ,IAAI,CAACnB,MAAM,CAACwB,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,MAAM;YAC3DC,EAAE,EAAEF,KAAK,CAACG,SAAS,IAAI,SAASF,KAAK,EAAE;YACvCG,IAAI,EAAEJ,KAAK,CAACK,UAAU,IAAI,eAAe;YACzCC,OAAO,EAAEN,KAAK,CAACM,OAAO,IAAI,iBAAiB;YAC3CjB,MAAM,EAAEW,KAAK,CAACO,YAAY,GAAG,WAAW,GAAG;UAC7C,CAAC,CAAC,CAAC;UACH/B,SAAS,CAACsB,iBAAiB,CAAC;QAC9B,CAAC,MAAM;UACLb,OAAO,CAACK,IAAI,CAAC,oCAAoC,EAAEI,IAAI,CAAC;UACxD;UACAlB,SAAS,CAACe,WAAW,CAAC,CAAC,CAAC;QAC1B;MACF,CAAC,CAAC,OAAOiB,GAAG,EAAE;QACZvB,OAAO,CAACwB,KAAK,CAAC,yCAAyC,EAAED,GAAG,CAAC;QAC7D;QACAhC,SAAS,CAACe,WAAW,CAAC,CAAC,CAAC;MAC1B;IACF;;IAEA;IACA,SAASA,WAAWA,CAAA,EAAG;MACrB,OAAO,CACL;QAAEW,EAAE,EAAE,CAAC;QAAEE,IAAI,EAAE,OAAO;QAAEE,OAAO,EAAE,kBAAkB;QAAEjB,MAAM,EAAE;MAAQ,CAAC,EACtE;QAAEa,EAAE,EAAE,CAAC;QAAEE,IAAI,EAAE,WAAW;QAAEE,OAAO,EAAE,qBAAqB;QAAEjB,MAAM,EAAE;MAAM,CAAC,EAC3E;QAAEa,EAAE,EAAE,CAAC;QAAEE,IAAI,EAAE,MAAM;QAAEE,OAAO,EAAE,sBAAsB;QAAEjB,MAAM,EAAE;MAAc,CAAC,EAC/E;QAAEa,EAAE,EAAE,CAAC;QAAEE,IAAI,EAAE,MAAM;QAAEE,OAAO,EAAE,cAAc;QAAEjB,MAAM,EAAE;MAAU,CAAC,EACnE;QAAEa,EAAE,EAAE,CAAC;QAAEE,IAAI,EAAE,MAAM;QAAEE,OAAO,EAAE,gBAAgB;QAAEjB,MAAM,EAAE;MAAW,CAAC,EACtE;QAAEa,EAAE,EAAE,CAAC;QAAEE,IAAI,EAAE,QAAQ;QAAEE,OAAO,EAAE,cAAc;QAAEjB,MAAM,EAAE;MAAW,CAAC,CACvE;IACH;IAEAR,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACJ,UAAU,CAAC,CAAC;;EAEhB;EACAZ,SAAS,CAAC,MAAM;IACd,IAAIe,QAAQ,CAAC8B,QAAQ,KAAK,SAAS,EAAE;MACnCC,aAAa,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAAC/B,QAAQ,CAAC8B,QAAQ,CAAC,CAAC;EAEvB,MAAME,cAAc,GAAGA,CAAA,KAAM;IAC3BjC,QAAQ,CAAC,WAAW,CAAC;EACvB,CAAC;EAED,MAAMkC,iBAAiB,GAAGA,CAAA,KAAM;IAC9BlC,QAAQ,CAAC,cAAc,CAAC;EAC1B,CAAC;EAED,MAAMgC,aAAa,GAAGA,CAAA,KAAM;IAC1BjC,aAAa,CAACoC,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;EACjC,CAAC;EAED,MAAMC,kBAAkB,GAAIC,OAAO,IAAK;IACtCrC,QAAQ,CAAC,WAAWqC,OAAO,EAAE,CAAC;EAChC,CAAC;EAED,oBACE5C,OAAA;IACE6C,SAAS,EAAC,aAAa;IACvBC,KAAK,EAAE;MACLC,eAAe,EAAE,OAAOjD,QAAQ,GAAG;MACnCkD,cAAc,EAAE,OAAO;MACvBC,kBAAkB,EAAE,QAAQ;MAC5BC,gBAAgB,EAAE,WAAW;MAC7BC,SAAS,EAAE;IACb,CAAE;IAAAC,QAAA,gBAEFpD,OAAA;MAAK6C,SAAS,EAAC,eAAe;MAAAO,QAAA,eAC5BpD,OAAA;QAAAoD,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrB,CAAC,eAENxD,OAAA;MAAK6C,SAAS,EAAC,cAAc;MAAAO,QAAA,gBAC3BpD,OAAA;QAAQyD,OAAO,EAAEjB,cAAe;QAACK,SAAS,EAAC,kBAAkB;QAAAO,QAAA,EAAC;MAE9D;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTxD,OAAA;QAAQyD,OAAO,EAAEhB,iBAAkB;QAACI,SAAS,EAAC,qBAAqB;QAAAO,QAAA,EAAC;MAEpE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,eAENxD,OAAA;MAAAoD,QAAA,eACEpD,OAAA,CAACH,IAAI;QAAC6D,EAAE,EAAC,GAAG;QAAAN,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,eAENxD,OAAA;MAAK6C,SAAS,EAAC,sBAAsB;MAAAO,QAAA,EAClCjD,MAAM,CAACwD,MAAM,KAAK,CAAC,gBAClB3D,OAAA;QAAAoD,QAAA,EAAG;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,gBAEpBxD,OAAA;QAAI6C,SAAS,EAAC,YAAY;QAAAO,QAAA,EACvBjD,MAAM,CAACwB,GAAG,CAAEC,KAAK,IAAK;UACrB;UACA,MAAMgB,OAAO,GAAG,CAAAhB,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEE,EAAE,KAAI,SAAS;UACtC,MAAM8B,SAAS,GAAG,CAAAhC,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEI,IAAI,KAAI,eAAe;UAChD,MAAM6B,YAAY,GAAG,CAAAjC,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEM,OAAO,KAAI,iBAAiB;UACxD,MAAM4B,WAAW,GAAG,CAAAlC,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEX,MAAM,KAAI,SAAS;UAE9C,oBACEjB,OAAA;YAEE6C,SAAS,EAAC,YAAY;YACtBY,OAAO,EAAEA,CAAA,KAAMd,kBAAkB,CAACC,OAAO,CAAE;YAAAQ,QAAA,eAE3CpD,OAAA;cAAK6C,SAAS,EAAC,YAAY;cAAAO,QAAA,gBACzBpD,OAAA;gBAAI6C,SAAS,EAAC,YAAY;gBAAAO,QAAA,EAAEQ;cAAS;gBAAAP,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,eAC3CxD,OAAA;gBAAG6C,SAAS,EAAC,eAAe;gBAAAO,QAAA,GAAC,WAClB,eAAApD,OAAA;kBAAAoD,QAAA,EAAOS;gBAAY;kBAAAR,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnC,CAAC,eACJxD,OAAA;gBAAG6C,SAAS,EAAC,cAAc;gBAAAO,QAAA,GAAC,SACnB,EAAC,GAAG,eACXpD,OAAA;kBACE6C,SAAS,EAAE,UAAUiB,WAAW,CAC7BC,WAAW,CAAC,CAAC,CACbC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,EAAG;kBAAAZ,QAAA,EAExBU;gBAAW;kBAAAT,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACR,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACN,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACD;UAAC,GAnBDZ,OAAO;YAAAS,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAoBV,CAAC;QAET,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IACL;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AACN;AAACtD,EAAA,CApLmBD,MAAM;EAAA,QAGXN,WAAW,EACXC,WAAW;AAAA;AAAAqE,EAAA,GAJNhE,MAAM;AAAA,IAAAgE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}